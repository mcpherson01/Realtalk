<?php

namespace Highwaypro\app\highWayPro\urls;

use HighWayPro\Original\Collections\Collection;
use Highwaypro\App\Data\Model\Preferences\Preferences;
use Highwaypro\App\Data\Model\Preferences\UrlPreferences;

Class PathGenerator
{
    protected $preferences = [];

    public function __construct(Preferences $preferences)
    {
        $this->preferences = $preferences->preferences;   
    }

    public function generate()
    {
        (string) $characters = $this->getAllowedCharacters();

        (integer) $length = $this->preferences->url->preferences->autoGeneratedPathLength;
        (string) $path = '';
        (integer) $max = strlen($characters) - 1;

        for ($i = 0; $i < $length; $i++) {
            $path .= $characters[mt_rand(0, $max)];
        }

        return $path;
    }

    public function getAllowedCharacters()
    {
        (object) $alphaCollection = Collection::range('a', 'z');
        (object) $numericCollection = Collection::range(1, 9);
        (object) $UPPERCASEalphaCollection = $alphaCollection->map('strtoupper');

        switch ((string) $this->preferences->url->preferences->autoGeneratedPathType) {
            case UrlPreferences::CHARACTER_ALPHABETIC:
                $characters = $alphaCollection;
                break;
            case UrlPreferences::CHARACTER_NUMERIC:
                $characters = $numericCollection;
                break;
            case UrlPreferences::CHARACTER_ALPHANUMERIC:
                $characters = $alphaCollection->concat($numericCollection);
                break;
            default:
                $characters = $numericCollection;
                break;
        }

        /* Fix case according to settings */
        if ($this->preferences->url->preferences->autoGeneratedPathType->isEither([UrlPreferences::CHARACTER_ALPHABETIC, UrlPreferences::CHARACTER_ALPHANUMERIC])) {
            if ($this->preferences->url->preferences->autoGeneratedPathAlphanumericCase->is(UrlPreferences::CASE_ANY)) {
                $characters = $characters->concat($UPPERCASEalphaCollection);
            } else if ($this->preferences->url->preferences->autoGeneratedPathAlphanumericCase->is(UrlPreferences::CASE_UPPERCASE)) {
                $characters = $characters->map(function($character){
                    return !is_numeric($character)? strtoupper($character) : $character;
                });
            }
        }

        return $characters->implode('')->get();
    }
    
}