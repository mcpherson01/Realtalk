<?php

class CBC_Automatic_Import_Page extends CBC_Page_Init implements CBC_Page{

	/**
	 * Stores any errors generated while creating automatic import feeds
	 * 
	 * @var WP_Error
	 */
	private $error;

	/**
	 * Holds reference to ajax class
	 *
	 * @var CBC_AJAX_Actions
	 */
	private $ajax;
	
	/**
	 * Constructor, fires up parent and stores variables
	 *
	 * @param CBC_Video_Post_Type $post_type
	 * @param CBC_AJAX_Actions $ajax
	 */
	public function __construct( CBC_Video_Post_Type $post_type, CBC_AJAX_Actions $ajax ){
		parent::__construct( $post_type );
		$this->ajax = $ajax;
	}
	
	/*
	 * (non-PHPdoc)
	 * @see CBC_Page::get_html()
	 */
	public function get_html(){
		$action = isset( $_GET[ 'action' ] ) ? $_GET[ 'action' ] : false;
		// if editing something, show the form
		if( $action && in_array( $action, array( 
				'edit', 
				'add_new' 
		) ) ){
			wp_enqueue_script( 'jquery-ui-datepicker' );
			wp_enqueue_style( 'jquery-style', '//ajax.googleapis.com/ajax/libs/jqueryui/1.8.2/themes/smoothness/jquery-ui.css' );
			
			// following GET variables are set from My YouTube plugin section
			if( isset( $_GET[ 'feed_type' ] ) ){
				$this->feed_obj->__set( 'type', $_GET[ 'feed_type' ] );
			}
			if( isset( $_GET[ 'list_id' ] ) ){
				$this->feed_obj->__set( 'id', $_GET[ 'list_id' ] );
			}
			if( isset( $_GET[ 'title' ] ) ){
				$this->feed_obj->__set( 'title', esc_attr( urldecode( $_GET[ 'title' ] ) ) );
			}
			require CBC_PATH . 'views/manage_playlist.php';
		}else{
			// show the list table
			$this->show_list();
		}
	}

	/**
	 * Display the table list view
	 * 
	 * @return void
	 */
	private function show_list(){
		$this->playlists_table->prepare_items();
		?>
<div class="wrap">
	<div class="icon32 icon32-posts-video" id="icon-edit">
		<br>
	</div>
	<h2>
		<?php _e('Automatic import', 'cbc_video')?>
		<a class="add-new-h2"
			href="<?php menu_page_url('cbc_auto_import');?>&action=add_new"><?php _e('Add New', 'cbc_video');?></a>
		<a class="add-new-h2"
			href="<?php menu_page_url('cbc_auto_import');?>&action=export_playlists"><?php _e('Export playlists', 'cbc_video');?></a>
		<a class="add-new-h2" href="#" id="cbc_playlist_import_trigger"><?php _e('Import playlists', 'cbc_video');?></a>
	</h2>
	<div id="cbc_import_playlists" class="hide-if-js">
		<form method="post"
			action="<?php menu_page_url( 'cbc_auto_import' );?>&action=import_playlists"
			enctype="multipart/form-data">
			<label for="cbc_playlists_json"><?php _e('Upload export file', 'cbc_video');?>: </label>
			<input type="file" id="cbc_playlists_json" name="cbc_playlists_json" />
			<?php wp_nonce_field( 'cbc_import_playlists', 'cbc_pu_nonce' );?>
			<?php submit_button( __( 'Upload', 'cbc_video' ), 'primary', 'submit', false );?>
		</form>
	</div>
	<?php
		/**
		 * Display various automatic import messages.
		 * <essages are generated by class CBC_Import_Messages
		 */
		$this->cpt->__get_importer()->get_messages()->status_message( '<div class="message updated"><p>', '</p></div>', true );
		?>		
	<form method="post" action="">
		<?php wp_nonce_field('cbc_playlist_table_actions', 'cbc_nonce');?>
		<?php $this->playlists_table->views();?>
		<?php $this->playlists_table->display();?>
	</form>

</div>
<?php
	}

	/*
	 * (non-PHPdoc)
	 * @see CBC_Page::on_load()
	 */
	public function on_load(){
		$action = false;
		if( isset( $_GET[ 'action' ] ) ){
			$action = $_GET[ 'action' ];
		}else if( isset( $_POST[ 'action' ] ) || isset( $_POST[ 'action2' ] ) ){
			$action = ( isset( $_POST[ 'action' ] ) && - 1 != $_POST[ 'action' ] ) ? $_POST[ 'action' ] : $_POST[ 'action2' ];
		}
		
		/**
		 * No action triggered, show the table
		 */
		if( ! $action || - 1 == $action ){
			require_once CBC_PATH . 'includes/admin/libs/playlists-list-table.class.php';
			$this->playlists_table = new CBC_Playlists_List_Table( $this->cpt );
			
			wp_enqueue_script( 'cbc-timer', CBC_URL . 'assets/back-end/js/timer.js', array( 
					'jquery' 
			) );
			wp_enqueue_script( 'cbc-playlists-table', CBC_URL . 'assets/back-end/js/auto_import.js', array( 
					'jquery'
			) );
			wp_enqueue_style( 'cbc_playlists-table', CBC_URL . 'assets/back-end/css/auto_import.css' );
			
			$page = menu_page_url( 'cbc_auto_import', false );
			$settings = cbc_get_settings();
			
			if( $this->cpt->__get_importer()->get_conditions()->allow_import() ){
				$message = sprintf( '<a class="button" href="%s">%s</a><br />', $page, __( 'Update now!' ) );
			}else{
				$message = __( 'Automatic import is prevented by filter implementation. In case you use server Cron Jobs for importing videos, please allow some time for the cron job to hit your website. If you notice that imports are not made, please check your cron job setup on your server.', 'cbc_video' );
			}
			
			wp_localize_script( 'cbc-timer', 'cbc_timer', array( 
					'ready' => $message 
			) );			
		}else{
			// action triggered, process it
			$this->do_action( $action );
		}
	}

	/**
	 * Performs a given action
	 * 
	 * @param string $action
	 */
	private function do_action( $action ){
		// checks if a single action is triggered. Single actions are actions that affect only one feed post
		$this->check_single_action( $action );
		// checks if a bulk action is triggered. Bulk actions can affect multiple feed posts
		$this->check_bulk_action( $action );
		
		// Perform add new and edit feed actions and also import/export feeds in JSON format
		switch( $action ){
			// create playlist
			case 'add_new':
			case 'edit':
				// create an instance for the current feed being created
				$this->feed_obj = new CBC_Autoimport_Feed( $this->cpt );
				$edit_post_id = 0;
				
				// edits have post ID set on GET
				if( isset( $_GET[ 'id' ] ) ){
					$edit_post_id = ( int ) $_GET[ 'id' ];
					$p = $this->feed_obj->set_post( $edit_post_id );
					if( ! $p || is_wp_error( $p ) ){
						$this->menu_page_redirect();
					}
				}
				
				if( isset( $_POST[ 'cbc_wp_nonce' ] ) && ! $this->has_error() ){
					check_admin_referer( 'cbc-save-playlist', 'cbc_wp_nonce' );
					$status = isset( $_POST[ 'cbc_feed' ][ 'playlist_live' ] ) ? 'publish' : 'draft';
					$post_id = $this->feed_obj->__insert( $_POST[ 'cbc_feed' ][ 'title' ], $status, $_POST[ 'cbc_feed' ], $edit_post_id );
					
					if( is_wp_error( $post_id ) ){
						$this->register_error( $post_id );
					}else{
						$this->menu_page_redirect( array( 
								'action' => 'edit', 
								'id' => $post_id 
						) );
					}
				}
				
				wp_enqueue_script( 'cbc-playlist-manage', CBC_URL . 'assets/back-end/js/playlist-edit.js', array( 
						'jquery' 
				) );
				wp_enqueue_style( 'cbc-playlist-manage', CBC_URL . 'assets/back-end/css/playlist-edit.css' );
				wp_localize_script( 'cbc-playlist-manage', 'cbc_pq', array( 
						'loading' => __( 'Making query, please wait...', 'cbc_video' ), 
						'still_loading' => __( 'Not done yet, be patient...', 'cbc_video' ), 
						'empty_id' => __( 'Please fill a playlist ID before checking.', 'cbc_video' ) 
				) );
			
			break;
			// export all playlists into a JSON file
			case 'export_playlists':
				header( "Content-type: text/json" );
				header( "Content-Disposition: attachment; filename=playlists_export.json" );
				header( "Pragma: no-cache" );
				header( "Expires: 0" );
				echo $this->export_json();
				die();
			break;
			// import playlist from uploaded file
			case 'import_playlists':
				check_admin_referer( 'cbc_import_playlists', 'cbc_pu_nonce' );
				
				if( ! isset( $_FILES[ 'cbc_playlists_json' ] ) || empty( $_FILES[ 'cbc_playlists_json' ][ 'tmp_name' ] ) ){
					$html = __( 'Please select a file to upload.', 'cbc_video' );
					$html .= '</p><p>' . '<a href="' . menu_page_url( 'cbc_auto_import', false ) . '">' . __( 'Go back', 'cbc_video' ) . '</a>' . '</p>';
					wp_die( $html );
				}
				
				add_filter( 'upload_mimes', array( 
						$this, 
						'upload_mimes' 
				) );
				
				$uploadedfile = $_FILES[ 'cbc_playlists_json' ];
				$upload_overrides = array( 
						'test_form' => false 
				);
				$movefile = wp_handle_upload( $uploadedfile, $upload_overrides );
				
				if( $movefile && ! isset( $movefile[ 'error' ] ) ){
					$content = wp_remote_retrieve_body( wp_remote_get( $movefile[ 'url' ] ) );
					// get YouTube id's for all existing playlists in website
					$existing_playlists = $this->get_registered_playlist_ids();
					// parse the file
					if( $content ){
						$content = json_decode( $content, true );
						foreach( $content as $list ){
							// don't register duplicates
							if( ! isset( $list[ 'id' ] ) || in_array( $list[ 'id' ], $existing_playlists ) ){
								continue;
							}
							// insert the feed in DB
							$feed_obj = new CBC_Autoimport_Feed( $this->cpt );
							$feed_obj->__insert( $list[ 'post_title' ], $list[ 'post_status' ], $list );
						}
					}
				}else{
					$html = $movefile[ 'error' ];
					$html .= '</p><p>' . '<a href="' . menu_page_url( 'cbc_auto_import', false ) . '">' . __( 'Go back', 'cbc_video' ) . '</a>' . '</p>';
					wp_die( $html );
				}
				
				// redirect to main page
				$this->menu_page_redirect();
			break;
		}
	}

	/**
	 * Performs single playlist actions.
	 * Actions performed
	 * are: reset, queue (add and remove) and delete
	 * 
	 * @param string $action - the current action
	 */
	private function check_single_action( $action ){
		// Perform single feed reset, queue and delete actions
		if( isset( $_GET[ '_wpnonce' ] ) ){
			if( in_array( $action, array( 
					'reset', 
					'queue', 
					'delete' 
			) ) ){
				if( wp_verify_nonce( $_GET[ '_wpnonce' ] ) ){
					$post_id = ( int ) $_GET[ 'id' ];
					$this->do_feed_action( $post_id, $action );
				}
				// redirect to main page
				$this->menu_page_redirect();
			}
		}
	}

	/**
	 * Perform bulk actions on feeds
	 * 
	 * @param string $action
	 */
	private function check_bulk_action( $action ){
		// perform bulk queue and bulk delete feeds
		if( isset( $_POST[ 'cbc_nonce' ] ) ){
			if( in_array( $action, array( 
					'start-import', 
					'stop-import', 
					'delete' 
			) ) ){
				if( wp_verify_nonce( $_POST[ 'cbc_nonce' ], 'cbc_playlist_table_actions' ) ){
					if( isset( $_POST[ 'cbc_playlist' ] ) ){
						$playlists = ( array ) $_POST[ 'cbc_playlist' ];
						foreach( $playlists as $playlist_id ){
							$this->do_feed_action( $playlist_id, $action );
						}
					}
				}
				// redirect to main page
				$this->menu_page_redirect();
			}
		}
	}

	/**
	 * Performs a given action on a given feed ID
	 * 
	 * @param integer $id - post ID
	 * @param string $action - action name: reset, delete, queue, start-import, stop-import
	 */
	private function do_feed_action( $id, $action ){
		$feed_obj = new CBC_Autoimport_Feed( $this->cpt );
		$feed_obj->set_post( $id );
		switch( $action ){
			case 'reset':
				$feed_obj->__reset();
			break;
			case 'delete':
				$feed_obj->__delete();
			break;
			case 'queue':
				$feed_obj->__switch_status();
			break;
			case 'start-import':
				$feed_obj->__switch_status( 'publish' );
			break;
			case 'stop-import':
				$feed_obj->__switch_status( 'draft' );
			break;
		}
	}

	/**
	 * Returns an array of all YouTube playlist ID's that are currently
	 * registered on the website
	 * 
	 * @return array
	 */
	private function get_registered_playlist_ids(){
		$args = array( 
				'post_type' => $this->cpt->get_playlist_post_type(), 
				'post_status' => 'any', 
				'orderby' => 'ID', 
				'order' => 'ASC', 
				'numberposts' => - 1 
		);
		$playlists = get_posts( $args );
		$ids = array();
		if( $playlists ){
			foreach( $playlists as $playlist ){
				$feed_obj = new CBC_Autoimport_Feed( $this->cpt );
				$feed_obj->set_post( $playlist );
				$playlist_id = $feed_obj->get( 'id' );
				if( $playlist_id ){
					$ids[] = $playlist_id;
				}
			}
		}
		return $ids;
	}

	/**
	 * Exports all existing feeds into JSON format
	 * 
	 * @return JSON
	 */
	private function export_json(){
		// get all playlists
		$args = array( 
				'post_type' => $this->cpt->get_playlist_post_type(), 
				'post_status' => 'any', 
				'orderby' => 'ID', 
				'order' => 'ASC', 
				'numberposts' => - 1 
		);
		$playlists = get_posts( $args );
		
		if( ! $playlists || is_wp_error( $playlists ) ){
			_e( 'While trying to export the playlists, an error occured. Please try again.', 'cbc_video' );
			die();
		}
		
		$output = array();
		
		foreach( $playlists as $playlist ){
			
			$feed_obj = new CBC_Autoimport_Feed( $this->cpt );
			$feed_obj->set_post( $playlist );
			$meta = $feed_obj->get();
			if( ! $meta ){
				continue;
			}
			
			$output[] = array( 
					'post_title' => esc_attr( $meta[ 'title' ] ), 
					'post_status' => $meta[ 'status' ], 
					'type' => $meta[ 'type' ], 
					'id' => $meta[ 'id' ], 
					'theme_import' => ( bool ) $meta[ 'theme_import' ], 
					'native_tax' => $meta[ 'native_tax' ], 
					'theme_tax' => $meta[ 'theme_tax' ], 
					'import_user' => $meta[ 'import_user' ], 
					'start_date' => $meta[ 'start_date' ], 
					'no_reiterate' => ( bool ) $meta[ 'no_reiterate' ] 
			);
		}
		
		return json_encode( $output );
	}

	/**
	 * Add additional mime types for uploading
	 * 
	 * @param array $mime_types
	 */
	public function upload_mimes( $mime_types ){
		$mime_types[ 'json' ] = 'text/json';
		return $mime_types;
	}

	/**
	 * Redirects to main menu page of this page
	 */
	private function menu_page_redirect( $extra_args = array() ){
		$args = array( 
				'post_type' => $this->cpt->get_post_type(), 
				'page' => 'cbc_auto_import' 
		);
		$url = add_query_arg( wp_parse_args( $extra_args, $args ), 'edit.php' );
		wp_redirect( $url );
		die();
	}

	/**
	 * Stores a WP_Error for later use
	 * 
	 * @param WP_Error $error
	 */
	private function register_error( WP_Error $error ){
		$this->error = $error;
	}

	/**
	 * Returns a previous registered error
	 */
	private function has_error(){
		if( is_wp_error( $this->error ) ){
			return $this->error->get_error_message();
		}
	}
}