<?php

namespace HighWayPro\App\HighWayPro\Texts\Dashboard;

use HighWayPro\App\HighWayPro\Texts\TextComponent;
use HighWayPro\Original\Collections\Collection;
use HighWayPro\Original\Environment\Env;

Class PreferencesText extends TextComponent
{
    const name = 'preferences';

    protected static function registerTexts()
    {
        return new Collection([
            'preferencesTitle' => esc_html__('HighWayPro Preferences', Env::textDomain()),


            'url' => [
                'autogeneratedUrlEnableLabel' => esc_html__('Create a short URL for each new or updated post', Env::textDomain()),

                'autoGeneratedPathType' => [
                    'title' => esc_html__('Auto Generated Path Type', Env::textDomain()),
                    'description' => esc_html__('Alphabetical: letters only. Numeric: numbers only. Alphanumeric: letters and/or numbers.', Env::textDomain())
                ],
                'autoGeneratedPathAlphanumericCase' => [
                    'title' => esc_html__('Auto generated path case', Env::textDomain()),
                    'description' => esc_html__('Any: a mix of both upper and lower case letters. Ignored when paths are numeric only.', Env::textDomain())
                ],
                'autoGeneratedPathLength' => [
                    'title' => esc_html__('Auto generated path length', Env::textDomain()),
                    'description' => esc_html__('Automatically generated paths with less than 5 characters are not recommended.', Env::textDomain())
                ]
            ],

            'post' => [
                'dynamicLinkInsertion' => [
                    'label' => esc_html__('Enable Dynamic Link Insertion', Env::textDomain()),
                     'description' => esc_html__('Shuts down the insertion on links for all urls and posts.', Env::textDomain()),
                ],
                'keyword_injection_limit' => [
                    'title' => esc_html__('Maximum number of insertions per keyword:', Env::textDomain()),
                    'description' => esc_html__('This limit is per keyword. Once the limit has been reached, no more links will be inserted for the remaining occurrences of that specific keyword. This is a default option. You can override this option on a per-url basis.', Env::textDomain())
                ],
                'keyword_injection_post_types_enabled' => [
                    'title' => esc_html__('Enable Dynamic Link Insertion on these post types:', Env::textDomain()),
                    'description' => esc_html__('This is a default option. You can override this option on a per-url basis.', Env::textDomain())
                ],
                'link_placement_click_behaviour' => [
                    'title' => esc_html__('When short links inside your content are cliked:', Env::textDomain()),
                    'description' => esc_html__('This is a default option. You can override this option on a per-url basis.', Env::textDomain())
                ],
                'link_placement_follow_type' => [
                    'title' => esc_html__('Default Follow Type:', Env::textDomain()),
                    'description' => esc_html__('Do-follow tells search engines to follow and pass link juice to the short link. This is a default option. You can override this option on a per-url basis.', Env::textDomain())
                ]
            ],
            'social' => [
                'og_url_is_enabled' => [
                    'label' => __('Use short urls on social media.', Env::textDomain()),
                    'description' => __('Sets the og:url property to the short url of your posts instead of the original permalink if the post has a short url. Recommended for tracking your social media visitors but adviced against if you want to keep your previous share count.', Env::textDomain()),
                ],
                'og_url_post_types_enabled' => [
                    'title' => __("Set short urls on social media only for these post types", Env::textDomain())
                ]
            ],
            'dashboard' => [
                'tourIsEnabled' => [
                    'label' => __('Retake the tour.', Env::textDomain()),
                    'description' => __('Click on "Start Tour" if you need to retake the tour.', Env::textDomain()),
                    'button' => __('Start Tour.', Env::textDomain()),
                ],
            ]
        ]);
    }
    
}