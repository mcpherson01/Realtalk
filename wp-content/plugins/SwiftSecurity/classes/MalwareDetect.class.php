<?php 
/**
 * Detect, and block malicious files, code snippets, backdoors, webshells
 * @version 1.0.1
 */

class SwiftSecurityMalwareDetect{
	
	public $Vulnerabilities = array(
			array(
					'name' => 'xss_vulnerability',
					'highlight' => null, 
					'regexp' =>'echo \$_(GET|REQUEST)',
					'score' => 100,
					'message' => 'Code Scanner found Cross Site Scripting (XSS) vulnerability. An attacker can exploit this!'
			),
			array(
					'name' => 'reflected_xss_vulnerability',
					'highlight' => null,
					'regexp' =>'echo \$_POST',
					'score' => 100,
					'message' => 'Code Scanner found Reflected Cross Site Scripting (XSS) vulnerability. An attacker can exploit this!'
			),
	);
	
	/**
	 * Suspicious PHP functions
	 * @var array
	 */
	public $SuspiciousPHPFunctions = array(
			array(
				'name' => 'exec',
				'highlight' => 'exec',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))exec\s*\(',
				'score' => 50,
				'message' => 'PHP exec function found'
			),			
			array(
				'name' => 'shell_exec',
				'highlight' => 'shell_exec',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))shell_exec\s*\(',
				'score' => 50,
				'message' => 'PHP shell_exec function found'
			),
			array(
				'name' => 'backtick_shell_exec',
				'highlight' => null,
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))`(.*)`',
				'score' => 50,
				'message' => 'Backticks (PHP shell_exec function) found'
			),
			array(
				'name' => 'passthru',
				'highlight' => 'passthru',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))passthru\s*\(',
				'score' => 50,
				'message' => 'PHP passthru function found'
			),
			array(
				'name' => 'system',
				'highlight' => 'system',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))system\s*\(',
				'score' => 50,
				'message' => 'PHP system function found'
			),
			array(
				'name' => 'popen',
				'highlight' => 'popen',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))popen\s*\(',
				'score' => 50,
				'message' => 'PHP popen function found'
			),
			array(
				'name' => 'proc_open',
				'highlight' => 'proc_open',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))proc_open\s*\(',
				'score' => 50,
				'message' => 'PHP proc_open function found'
			),
			array(
				'name' => 'pcntl_exec',
				'highlight' => 'pcntl_exec',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))pcntl_exec\s*\(',
				'score' => 50,
				'message' => 'PHP pcntl_exec function found'
			),
			array(
				'name' => 'eval',
				'highlight' => 'eval',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))eval\s*\(',
				'score' => 50,
				'message' => 'PHP eval function found'
			),
			array(
				'name' => 'assert',
				'highlight' => 'assert',
				'regexp' =>'^(((.*)(=|;)(\s*)?)|((@|\s)*))assert\s*\(',
				'score' => 50,
				'message' => 'PHP assert function found'
			),			
			array(
				'name' => 'callback_function',					
				'highlight' => null,
				'regexp' => '^(((.*)(=|;)(\s*)?)|((@|\s)*))(ob_start|array_diff_uassoc|array_filter|array_diff_ukey|array_intersect_uassoc|array_intersect_ukey|array_map|array_reduce|array_udiff_assoc|array_udiff_uassoc|array_udiff|array_uintersect_assoc|array_uintersect_uassoc|array_uintersect|array_walk_recursive|array_walk|assert_options|uasort|uksort|usort|preg_replace_callback|spl_autoload_register|iterator_apply|call_user_func|call_user_func_array|register_shutdown_function|register_tick_function|set_error_handler|set_exception_handler|session_set_save_handler|sqlite_create_aggregate|sqlite_create_function)\s*\((.+)\)',
				'score' => 30,
				'message' => 'We found a PHP function which accepts callbacks as argument. These functions can be malicious or vulnerable, but also can be full legit'
			),
			array(
				'name' => 'extract',					
				'highlight' => 'extract',
				'regexp' => '^(((.*)(=|;)(\s*)?)|((@|\s)*))extract\s*\(',
				'score' => 70,
				'message' => 'PHP extract function found. Extract creates variables from an array (eg $_POST, $_GET or $_REQUEST). It can be legit, but if there is some strange code execution like $extracted_variable_1($extracted_variable_2) it should be malicious.'
			),
			array(
				'name' => 'parse_str',
				'highlight' => 'parse_str',
				'regexp' => '^(((.*)(=|;)(\s*)?)|((@|\s)*))parse_str\s*\(([^,]*)\)',
				'score' => 70,
				'message' => 'PHP parse_str function found with only one parameter. Parse_str creates variables from a query string(eg variable=this&other=that). It can be legit, but if there is some strange code execution like $created_variable_1($created_variable_2) it should be malicious.'
			),
			array(
				'name' => 'information_disclosure',
				'highlight' => null,
				'regexp' => '^(((.*)(=|;)(\s*)?)|((@|\s)*))(phpinfo|posix_mkfifo|posix_getlogin|posix_ttyname|getenv|get_current_user|proc_get_status|get_cfg_var|getcwd|getlastmo|getmygid|getmyinode|getmypid|getmyuid)\s*\(',
				'score' => 10,
				'message' => 'Code Scanner found some function which can leaks some information about your system settings. It can be legit, but vulnerable as well.'
			),
			array(
				'name' => 'create_function',
				'highlight' => 'create_function',
				'regexp' => '^(((.*)(=|;)(\s*)?)|((@|\s)*))create_function\s*\(',
				'score' => 70,
				'message' => 'PHP create_function function found, a malicious user can use it to create and run functions. It can be legit, but mostly it isn\'t, and if it uses some user defined value it can be vulnerable.'
			),
			array(
				'name' => 'remote_include',
				'highlight' => null,
				'regexp' => '^(((.*)(=|;)(\s*)?)|((@|\s)*))(include|require)(_once)?\s*\(?("|\')https?://',
				'score' => 70,
				'message' => 'Code Scanner found include or require which includes a remote file. It should be malicious, and vulnerable as well.'
			),
		);
	
	/**
	 * Suspicious snippets
	 * @var array
	 */
	public $SuspiciousSnippets = array(
			array(
				'name' => 'hex_encoded_string',
				'highlight' => null,
				'regexp' =>'\\\\x([abcdef0-9]{2}){3,}',
				'score' => 50,
				'message' => 'Code Scanner found some code which is hex encoded. It can be legit, but not a usual thing. Malicious users can hide their functions in hex encoded expressions.'
			),
			array(
				'name' => 'strange_function_call',
				'highlight' => null,
				'regexp' =>'\$[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*\(',
				'score' => 20,
				'message' => 'Code Scanner found a variable which is called as a function. It can be a legit callback function, but if it uses user defined value it can be malicious and vulnerable as well'
			),
			array(
				'name' => 'user_defined_variable_as_function_call',
				'highlight' => null,
				'regexp' =>'\$_(REQUEST|POST|GET|COOKIE|FILE)\(',
				'score' => 100,
				'message' => 'Code Scanner found a user defined variable which is called as a function. It can be malicious and it is vulnerable as well'
			),	
			array(
				'name' => 'run_user_defined_variable',
				'highlight' => null,
				'regexp' =>'\b(eval|assert|ob_start|array_diff_uassoc|array_filter|array_diff_ukey|array_intersect_uassoc|array_intersect_ukey|array_map|array_reduce|array_udiff_assoc|array_udiff_uassoc|array_udiff|array_uintersect_assoc|array_uintersect_uassoc|array_uintersect|array_walk_recursive|array_walk|assert_options|uasort|uksort|usort|preg_replace_callback|spl_autoload_register|iterator_apply|call_user_func|call_user_func_array|register_shutdown_function|register_tick_function|set_error_handler|set_exception_handler|session_set_save_handler|sqlite_create_aggregate|sqlite_create_function)\s*\((.*)\$_(REQUEST|POST|GET|COOKIE|FILE)',
				'score' => 20,
				'message' => 'Code Scanner found some code execution which uses user defined variable. It can be legit, but it should be a malicious code, and it is vulnerable as well'
			),		
	);
	
	/**
	 * Known shells fingerprints
	 * @var array
	 */
	public $KnownShells = array(
			array(
				'name' => 'b374k',
				'highlight' => null,
				'pattern' => 'error{[|b374k|]}',
				'score' => 100,
				'message' => 'b374k shell found'
			),
			array(
				'name' => 'r57shell',
				'highlight' => null,
				'pattern' =>'header(\'WWW-Authenticate: Basic realm="r57shell"\');',
				'score' => 100,
				'message' => 'r57 shell found'
			),			
			array(
				'name' => 'C99',
				'highlight' => null,
				'pattern' =>'NKCKUDMyNTg3Agg2S5eqUEpJDgcDCAxMT06hgk26vAwUFUhDtYpCuwZByBMRRMyCRwMGRkUg0xIf',
				'score' => 100,
				'message' => 'C99 or C100 shell found'
			),
			array(
				'name' => 'ASPXspy',
				'highlight' => null,
				'pattern' =>'vbhLn="ASPXSpy";',
				'score' => 100,
				'message' => 'ASPXspy shell found'
			),
			array(
				'name' => 'sadrazam',
				'highlight' => null,
				'pattern' =>'PD9waHANCmVycm9yX3JlcG9ydGluZyg3KTsNCkBzZXRfbWFnaWNfcXVvdGVzX3J1bnRpbWUoMCk7DQpvYl9zdGFydCgpOw0KJG10aW1lID0gZXhwbG9kZSgnICcsIG1pY3JvdGltZSgpKTsNCiRzdGFydHRpbWUgPSAkb',
				'score' => 100,
				'message' => 'sadrazam shell found'
			),
			array(
				'name' => 'cmdshell',
				'highlight' => null,
				'pattern' =>'Response.Write "<font face=""arial"" size=""2""><br><br><b>Brute:</b> Test and Deface root and sub directories.<br><br>"',
				'score' => 100,
				'message' => 'CMD shell found'
			),
			array(
				'name' => 'vbhackershell',
				'highlight' => null,
				'pattern' =>'mysql_connect($host,$user,$pass) or die(\'<font color=red>Nope,</font><font color=yellow>No cOnnection with user</font>\');',
				'score' => 100,
				'message' => 'VB hacker shell found'
			),
			array(
				'name' => 'antichatshell',
				'highlight' => null,
				'pattern' =>'$msg8873 = "$a5\n$b33\n$c87\n$d23\n$e09\n$f23\n$g32\n$h65"',
				'score' => 100,
				'message' => 'Antichat shell found'
			),			
			array(
				'name' => 'MySQLshell',
				'highlight' => null,
				'pattern' =>'$action == "bG9nb25fc3VibWl0"',
				'score' => 100,
				'message' => 'MySQL shell found'
			),
			array(
				'name' => 'webadmin',
				'highlight' => null,
				'pattern' =>'if (!$win && function_exists(\'exec\') && $file[\'is_file\'] && $file[\'is_executable\'] && file_exists(\'/bin/sh\')) {',
				'score' => 100,
				'message' => 'Webadmin shell found'
			),
			array(
				'name' => 'wso_shell',
				'highlight' => null,
				'pattern' =>'IyEvdXNyL2Jpbi9wZXJsDQp1c2UgU29ja2V0Ow0KJGlhZGRyPWluZXRfYXRvbigkQVJHVlswXSkgfHwgZGllKCJFcnJvcjogJCFcbiIpOw0KJHBhZGRyPXNvY2thZGRyX2luKCRBUkdWWzFdLCAkaWFkZHIpIHx8IGRpZSgiRXJyb3I6ICQhXG4iKTsNCiRwcm90bz1nZXRwcm90b2J5bmFtZSgndGNwJyk7DQpzb2NrZXQoU09DS0VULCBQRl9JTkVULCBTT0NLX1NUUkVBTSwgJHByb3RvKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpjb25uZWN0KFNPQ0tFVCwgJHBhZGRyKSB8fCBkaWUoIkVycm9yOiAkIVxuIik7DQpvcGVuKFNURElOLCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RET1VULCAiPiZTT0NLRVQiKTsNCm9wZW4oU1RERVJSLCAiPiZTT0NLRVQiKTsNCnN5c3RlbSgnL2Jpbi9zaCAtaScpOw0KY2xvc2UoU1RESU4pOw0KY2xvc2UoU1RET1VUKTsNCmNsb3NlKFNUREVSUik7',
				'score' => 100,
				'message' => 'WSO shell found'
			),
			
	);

	/**
	 * These lines and expressions cause false positive alerts in Wordpress core files.
	 * When the code scanning is running we replace these expressions (only the first) to prevent false positive alerts.
	 * @var array
	 */
	public $FalsePositiveExceptions = array(
		'wp-content/plugins/SwiftSecurity/SwiftSecurity.php' => array(
				array(
						'phrase' => 'phpinfo()',
						'type' => 'string',
						'limit' => 1
				),
				array(
						'phrase' => '$this->$moduleName->GetNginxRules()(',
						'type' => 'string',
						'limit' => 1
				)
		),
		'wp-admin/press-this.php' => array(
			array(
				'phrase' => 'eval(data);',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'var my_src = eval(',
				'type' => 'string',
				'limit' => 2
			)
		),
		'wp-includes/Text/Diff/Engine/shell.php' => array(
			array(
				'phrase' => 'array_walk\(\$(from|to)_lines, array\(\'Text_Diff\', \'trimNewlines\'\)\);',
				'type' => 'regex',
				'limit' => 2
			),
			array(
				'phrase' => '$diff = shell_exec($this->_diffCommand . \' \' . $from_file . \' \' . $to_file);',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'assert(\'$match[1] - $from_line_no == $match[4] - $to_line_no\');',
				'type' => 'string',
				'limit' => 1
			)
		),
		'wp-includes/Text/Diff/Engine/native.php' => array(
			array(
				'phrase' => 'array_walk\(\$(from|to)_lines, array\(\'Text_Diff\', \'trimNewlines\'\)\);',
				'type' => 'regex',
				'limit' => 2
			),
			array(
				'phrase' => 'assert\((.*)\)',
				'type' => 'regex',
				'limit' => 13
			)	
		),
		'wp-includes/class-snoopy.php' => array(
			array(
				'phrase' => 'exec($this->curl_path." -k -D \"$headerfile\"".$cmdline_params." \"".escapeshellcmd($URI)."\"",$results,$return);',
				'type' => 'string',
				'limit' => 1
			)
		),
		'wp-admin/includes/class-ftp.php' => array(
			array(
				'phrase' => '$path=getcwd();',
				'type' => 'string',
				'limit' => 1
			)
		),
		'wp-includes/Text/Diff.php' => array(
			array(
					'phrase' => '$this->_edits = call_user_func_array(array($diff_engine, \'diff\'), $params);',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$tmp = getenv(\'TMPDIR\');',
					'type' => 'string',
					'limit' => 1
			),
			array(
				'phrase' => 'assert\(count\(\$(from|to)_lines\) == count\(\$mapped_(from|to)_lines\)\);',
				'type' => 'regex',
				'limit' => 2
			),	
			array(
					'phrase' => '$diff_engine = new $class();',
					'type' => 'string',
					'limit' => 1
			)
		),
		'wp-includes/ID3/getid3.php' => array(
			array(
					'phrase' => '$dir_listing = `$commandline`;',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$VorbisCommentError = `$commandline`;',
					'type' => 'string',
					'limit' => 2
			),
			array(
					'phrase' => '$tag = new $tag_class($this);',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$class = new $class_name($this);',
					'type' => 'string',
					'limit' => 1
			)
		),
		'wp-includes/class-phpmailer.php' => array(
			array(
					'phrase' => 'if (!@$mail = popen($sendmail, \'w\')) {',
					'type' => 'string',
					'limit' => 2
			),
			array(
					'phrase' => 'if(!@$mail = popen($sendmail, \'w\'))',
					'type' => 'string',
					'limit' => 2
			),
			array(
					'phrase' => 'call_user_func_array($this->action_function, $params);',
					'type' => 'string',
					'limit' => 1
			)
		),
		'wp-includes/functions.php' => array(
			array(
					'phrase' => '$filename = call_user_func( $unique_filename_callback, $dir, $name, $ext );',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => 'call_user_func( $function, $message, $title, $args );',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$json = call_user_func_array( \'json_encode\', $args );',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => 'phpinfo(8);',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$datemonth = $wp_locale->get_month( $datefunc( \'m\', $i ) );',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$dateweekday = $wp_locale->get_weekday( $datefunc( \'w\', $i ) );',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$datemeridiem = $wp_locale->get_meridiem( $datefunc( \'a\', $i ) );',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$datemeridiem_capital = $wp_locale->get_meridiem( $datefunc( \'A\', $i ) );',
					'type' => 'string',
					'limit' => 1
			),	
			array(
					'phrase' => '$j = @$datefunc( $dateformatstring, $i );',
					'type' => 'string',
					'limit' => 1
			)												
		),
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/functions.bb-template.php' => array(
			array(
				'phrase' => 'extract\((.*)\)',
				'type' => 'regex',
				'limit' => 21
			),
			array(
				'phrase' => 'call_user_func( $self );',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'uksort($tag_counts, \'strnatcasecmp\');',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'AND `$bbdb->term_relationships`.`term_taxonomy_id` = `$bbdb->term_taxonomy`.`term_taxonomy_id`',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'AND `$bbdb->term_taxonomy`.`term_id` = `$bbdb->terms`.`term_id`',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => '$parts[$_part_name] = $_part_function( $_part_args );',
				'type' => 'string',
				'limit' => 1
			)			
		),
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/class.mailer.php' => array(
			array(
					'phrase' => 'if(!@$mail = popen($sendmail, \'w\')) {',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => '$encoded = preg_replace_callback\((.*)\)',
					'type' => 'string',
					'limit' => 3
			)
		),
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/backpress/functions.core.php' => array(
			array(
					'phrase' => 'phpinfo(8);',
					'type' => 'string',
					'limit' => 1
			),
			array(
					'phrase' => 'call_user_func_array( \'setcookie\', $args );',
					'type' => 'string',
					'limit' => 1
			)
		),
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/functions.bb-users.php' => array(
			array(
					'phrase' => '`%1\$s`',
					'type' => 'string',
					'limit' => 1
			)
		),	
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-includes/functions.bb-posts.php' => array(
			array(
				'phrase' => 'extract( wp_parse_args( $args, $defaults ) );',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'WHERE `$bbdb->term_relationships`.`term_taxonomy_id` = `$bbdb->term_taxonomy`.`term_taxonomy_id`',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'AND `$bbdb->term_taxonomy`.`term_id` = `$bbdb->terms`.`term_id`',
				'type' => 'string',
				'limit' => 1
			)
		),
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-admin/includes/defaults.bb-schema.php' => array(
			array(
					'phrase' => '`(.*)`',
					'type' => 'regex',
					'limit' => 100
			)
		),
		'wp-content/plugins/buddypress/bp-forums/bbpress/bb-admin/includes/functions.bb-recount.php' => array(
			array(
					'phrase' => '`(.*)`',
					'type' => 'regex',
					'limit' => 47
			)
		),
		'wp-content/plugins/bbpress/includes/admin/tools.php' => array(
			array(
					'phrase' => '`(.*)`',
					'type' => 'regex',
					'limit' => 151
			)
		),
		'wp-content/plugins/woocommerce/includes/admin/reports/class-wc-admin-report.php' => array(
			array(
				'phrase' => 'extract( $args );',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => '$cached_results[ $query_hash ] = apply_filters( \'woocommerce_reports_get_order_report_data\', $wpdb->$query_type( $query ), $data );',
				'type' => 'string',
				'limit' => 1
			)
		),
		'wp-admin/js/revisions-js.php' => array(
			array(
				'phrase' => 'eval(function(p,a,c,k,e,r){e=function(c){return(c<a?\'\':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!\'\'.replace(/^/,String))',
				'type' => 'string',
				'limit' => 1
			),
		),
		'wp-admin/includes/file.php' => array(
			array(
				'phrase' => 'extract(.*)',
				'type' => 'regex',
				'limit' => 6
			),
			array(
				'phrase' => '\$upload_error_handler\(',
				'type' => 'regex',
				'limit' => 9
			),
			array(
				'phrase' => '$wp_filesystem = new $method($args);',
				'type' => 'string',
				'limit' => 1
			),
		),
		'wp-includes/media.php' => array(
			array(
				'phrase' => 'extract(.*)',
				'type' => 'regex',
				'limit' => 2
			),
			array(
				'phrase' => '$editor = new $implementation( $path );',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => '$attr = array_map( \'esc_attr\', $attr );',
				'type' => 'string',
				'limit' => 1
			),
		),
		'wp-includes/category-template.php' => array(
			array(
				'phrase' => 'extract(.*)',
				'type' => 'regex',
				'limit' => 4
			),
			array(
				'phrase' => '$args[\'topic_count_text_callback\'] = create_function(\'$count\', $body);',
				'type' => 'string',
				'limit' => 1
			),
			array(
				'phrase' => 'uasort( $tags, \'_wp_object_name_sort_cb\' );',
				'type' => 'string',
				'limit' => 2
			),
			array(
					'phrase' => '$counts[ $key ] = $topic_count_scale_callback($tag->count);',
					'type' => 'string',
					'limit' => 1
			),			
		)
		
	);
	
	/**
	 * PHP code
	 * @var string
	 */
	public $Content;
	
	/**
	 * The md5 hash of the $Content
	 * @var string
	 */
	public $Md5;
	
	/**
	 * The current file's relaive path from Wordpress ABSPATH
	 * @var string
	 */
	public $Filename;
	
	/**
	 * If it is true we scan a file if not we scan code sipplet or image (for exif)
	 * @var boolean
	 */
	public $IsFile = false;
	
	/**
	 * Load specified file content to $Content variable
	 * @param string $filename
	 */
	public function LoadFile($file, $md5 = null){
		$this->Content = file_get_contents($file);
		$this->IsFile = true;
		list(,$this->Filename) = explode(ABSPATH, $file);
		$this->Md5 = ($md5 == null ? md5($this->Content) : $md5);
	}
	
	/**
	 * Load specified image file's EXIF data to $Content variable
	 * @param string $filename
	 */
	public function LoadExif($filename, $md5 = null){
		$this->Content = '';
		foreach (exif_read_data($filename) as $key=>$value){
			$this->Content .= $key . ':' . $value . "\n";
		}
		$this->Md5 = ($md5 == null ? md5($this->Content) : $md5);
	}
	
	/**
	 * Detect suspicious files
	 * @return array Returns an array which contains an Alerts array and a Score integer (0-100)
	 * The score represents the probability that the file contains malicious code. Lower score is better, the higher the worse
	 */
	public function Detect(){
		$Alerts = array();
		$Founds = array();
		$Score = 0;
		$LineNo = 0;
		
		//Avoid false positive alert for self
		if (ABSPATH . $this->Filename == __FILE__){
			return array(
					'Alerts' => null,
					'Score' => 0,
					'Whitelisted' => false
			);
		}
		
		//Remove comments
		$this->Content = preg_replace('~/\*.*?\*/~s', '', $this->Content);
		$this->Content = preg_replace('~//(.*)~', "", $this->Content);
		
		//Remove false positive expressions
		if ($this->IsFile){
			foreach ((array)$this->FalsePositiveExceptions[$this->Filename] as $exception){
				if ($exception['type'] == 'string'){
					$this->Content = preg_replace('~'.preg_quote($exception['phrase']).'~', '', $this->Content, $exception['limit']);
				}
				else if ($exception['type'] == 'regex'){
					$this->Content = preg_replace('~'.$exception['phrase'].'~', '', $this->Content, $exception['limit']);
				}
			}
		}
		
		//Check vulnerabilities
		foreach ((array)explode("\n",$this->Content) as $Line){
			$LineNo++;
			foreach ((array)$this->Vulnerabilities as $vulnerability){
				if (preg_match('~'.$vulnerability['regexp'].'~i',$Line)){
					$Alerts[] = array(
							'label' => __('Vulnerability found', 'SwiftSecurity'),
							'result' => array(
									'text' => __($vulnerability['message'],'SwiftSecurity') .': '. $LineNo,
									'match' => SwiftSecurityMalwareDetect::SafeLog($Line),
									'highlight' => $vulnerability['highlight']
							));
					$Founds[$vulnerability['name']] = true;
				}
			}
		}
		
		//Check suspicious functions
		foreach ((array)explode("\n",$this->Content) as $Line){
			$LineNo++;
			foreach ((array)$this->SuspiciousPHPFunctions as $function){
				if (preg_match('~'.$function['regexp'].'~i',$Line)){
					$Alerts[] = array(
							'label' => __('Suspicious PHP function found', 'SwiftSecurity'),
							'result' => array(
									'text' => __($function['message'],'SwiftSecurity') .': '. $LineNo,
									'match' => SwiftSecurityMalwareDetect::SafeLog($Line),
									'highlight' => $function['highlight']
							));
					$Founds[$function['name']] = true;
				}
			}
		}
		
		//Check suspicious snippets
		foreach ((array)explode("\n",$this->Content) as $Line){
			$LineNo++;
			foreach ((array)$this->SuspiciousSnippets as $snippet){
				if (preg_match('~'.$snippet['regexp'].'~i',$Line)){
					$Alerts[] = array(
							'label' => __('Suspicious PHP code snippet found', 'SwiftSecurity'),
							'result' => array(
									'text' => __($snippet['message'],'SwiftSecurity') .': '. $LineNo,
									'match' => SwiftSecurityMalwareDetect::SafeLog($Line),
									'highlight' => $snippet['highlight']
							));
					$Founds[$snippet['name']] = true;
				}
			}
		}
		
		//Check known shells
		foreach ((array)$this->KnownShells as $shell){
			if (strpos($this->Content, $shell['pattern']) !== false){
				//Owerwrite previous alerts, because we don't need them anymore
				$Alerts = array();
				$Alerts[] = array(
						'label' => __('Known shell found','SwiftSecurity'),
						'result' => array(
								'text' => __($shell['message'],'SwiftSecurity')
						));
				$Founds['known_shell_found'] = true;
			}
		}
		
		//Prevent memory leaking
		unset($this->Content);
		
		return array(
				'Alerts' => $Alerts,
				'Score' => $this->_CalculateScore($Founds),
			    'Whitelisted' => false
		);
	}
	
	/**
	 * Detect PHP code in images EXIF data
	 * @return array Returns an array which contains an Alerts array and a Score integer (0/100)
	 */
	public function ExifDetect(){
		$Alerts = array();
		$Positive = false;

		//Check PHP open tag
		if (preg_match('~<\?~',$this->Content)){
			$Alerts[] = array(
					'label' => __('PHP code found in EXIF data'),
					'result' => array(
							'text' => __('In normal cases EXIF data of images doesn\'t contain PHP codes, so this file is probably a malicious file','SwiftSecurity')
					));
			$Positive = true;
		}
		
			//Check suspicious functions
			foreach ((array)$this->SuspiciousPHPFunctions as $function){
				if (preg_match('~'.$function['regexp'].'~i',$this->Content)){
					$Alerts[] = array(
							'label' => __('PHP code found in EXIF data'),
							'result' => array(
								'text' => __('In normal cases EXIF data of images doesn\'t contain PHP codes, so this file is probably a malicious file','SwiftSecurity') . ' (' . $function['name'] . ')'
							));
					$Positive = true;
				}
			}
			//Check suspicious snippets
			foreach ((array)$this->SuspiciousSnippets as $snippet){
				if (preg_match('~'.$snippet['regexp'].'~i',$this->Content)){
					$Alerts[] = array(
							'label' => __('PHP code found in EXIF data'),
							'result' => array(
								'text' => __('In normal cases EXIF data of images doesn\'t contain PHP codes, so this file is probably a malicious file','SwiftSecurity') . ' (' . $snippet['name'] . ')'
							));
					$Positive = true;
				}
			}
				

		//Prevent memory leaking
		unset($this->Content);
			
		//If there is some PHP code in exif always return score 100
		return array(
				'Alerts' => $Alerts,
				'Score' => ($Positive ? 100 : 0),
				'Whitelisted' => false
		);
	}
	
	public static function SafeLog($text){
		$text = (strlen($text) > 200 ? substr($text,0,200) . '...' : $text);
		return htmlentities($text);
	}
	
	private function _CalculateScore($Founds){
		$Score = 0;
		
		//Vulnerabilities
		if (isset($Founds['xss_vulnerability']) && $Founds['xss_vulnerability']){
			$Score += 100;
		}
		
		if (isset($Founds['sqli_vulnerability']) && $Founds['sqli_vulnerability']){
			$Score += 100;
		}
		
		/*Check suspicious combinations*/
		
		//Run user defined variables as a function
		if (((isset($Founds['parse_str']) && $Founds['parse_str'] || isset($Founds['extract']) && $Founds['extract']) && isset($Founds['strange_function_call']) && $Founds['strange_function_call']) || (isset($Founds['user_defined_variable_as_function_call']) && $Founds['user_defined_variable_as_function_call'])){
			$Score += 80;
		}

		//Exec, shell_exec, passthru or system functions
		if ((isset($Founds['exec']) && $Founds['exec']) || (isset($Founds['shell_exec']) && $Founds['shell_exec']) || (isset($Founds['passthru']) && $Founds['passthru']) || (isset($Founds['system']) && $Founds['system']) || (isset($Founds['backtick_shell_exec']) && $Founds['backtick_shell_exec']) || (isset($Founds['popen']) && $Founds['popen']) || (isset($Founds['proc_open']) && $Founds['proc_open']) || (isset($Founds['pcntl_exec']) && $Founds['pcntl_exec'])){
			$Score += 70;
		}
		
		//Found eval
		if ((isset($Founds['eval']) && $Founds['eval']) || (isset($Founds['assert']) && $Founds['assert'])){
			$Score += 50;
			
			//More suspicious if hex encoded string is present
			if(isset($Founds['hex_encoded_string']) && $Founds['hex_encoded_string']){
				$Score += 20;
			}
			
			//Eval user defined variable
			if (isset($Founds['run_user_defined_variable']) && $Founds['run_user_defined_variable']){
				$Score += 100;
			}
		}
		
		//Run hex-encoded string
		if (((isset($Founds['callback_function']) && $Founds['callback_function']) || (isset($Founds['user_defined_variable_as_function_call']) && $Founds['user_defined_variable_as_function_call'])) && (isset($Founds['hex_encoded_string']) && $Founds['hex_encoded_string'])){
			$Score += 80;
		}
		
		//Remote file include
		if (isset($Founds['remote_include']) && $Founds['remote_include']){
			$Score += 90;
		}
		
		//Vulnerable or insecure functions
		if (isset($Founds['information_disclosure']) && $Founds['information_disclosure']){
			$Score += 10;
		}
		
		/*Check suspicious strings*/
		
		//Known shells
		if (isset($Founds['known_shell_found']) && $Founds['known_shell_found']){
			$Score += 100;
		}
		
		return ($Score > 100 ? 100 : $Score);
	}
}

?>